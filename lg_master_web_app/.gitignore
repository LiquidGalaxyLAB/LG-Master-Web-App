# -------------------------------------------- .GITIGNORE --------------------------------------------
# This file is used to tell Git which files and folders it should ignore and not track 
# It does NOT delete these folders and files, it just ignores them
# This is useful because only the important files are tracked and shared this way, saving space
# This also prevents problems like accidentally sharing sensitive data or files that are automatically created

# ------------------------------------ USED IN THIS PROJECT ------------------------------------
# ----------------------------- MISCELLANEOUS -----------------------------
*.class
# Compiled Java bytecode files
# These are generated automatically when building Java projects and are not needed in version control

*.log
# Log files generated during app runtime or development
# These can contain info on debug, errors, or output
# They are temporary and often large

*.pyc
# Compiled Python files (Python bytecode)
# Automatically created by Python to speed up loading
# Not needed for sharing code

*.swp        
# Temporary swap files created by the Vim text editor (used by Linux and macOS)
# They are created while editing a file to help recover your work in case something goes wrong
# They are only used while editing, they are NOT part of your app
# Once you close Vim, these files are deleted automatically, and if for some reason they're left behind, you can safely delete them

.DS_Store
# DS_Store stands for Desktop Services Store
# Hidden file created by Mac computers to remember how you like to view folders (icon positions, window size, etc)
# It is personal and can cause problems if shared, such as expose your information
# If you delete a .DS_Store file, macOS will create a new one next time you open a folder

.atom/
# Configuration and cache folder for the Atom text editor
# Personal editor settings that should NOT be shared with others

.build/
# Common folder for temporary build files created during compilation
# Can be large and is automatically regenerated, so it can (and should) be ignored

.buildlog/
# Logs generated during build processes
# Useful for debugging but unnecessary for version control

.history
# Sometimes created by certain editors to track edit history or changes
# It contains local backup info and is not part of the actual code

.svn/
# Used by Apache Subversion (SVN) which is an alternative to Git
# Stores metadata for version control in SVN
# SHOULD be ignored in Git projects (like this one)

.swiftpm/
# Folder used by Swift Package Manager to store build artifacts and configuration
# Not needed in Git because it is automatically created by Swift tools

migrate_working_dir/
# Temporary or working directory created during a database or system migration
# Usually contains intermediate files, which are not needed after migration is complete


# ----------------------------- INTELLIJ IDEA RELATED (CODE EDITOR SETTINGS) -----------------------------
*.iml
# These are project files made by IntelliJ or Android Studio
# They are different for each developer or computer
# If you delete them, they will simply be recreated next time you open the project

*.ipr
# Stores project specific settings like compiler settings or paths
# These are specific to your environment and should NOT be shared

*.iws
# Contains personal workspace settings (open files, window layout, etc.)
# This is user specific and can vary across machines, so it SHOULD be ignored

.idea/
# This folder stores settings for IntelliJ or Android Studio editors
# As the vscode folder, these are personal
# If you delete this folder it will be recreated next time you open the project

#.vscode/    
# This folder stores settings for Visual Studio Code
# These are personal and not needed to run the app or for other users to build it
# If you delete this folder VSCode will simply recreate it as needed
# It contains launch configuration and tasks you configure in VS Code which you may wish to 
# be included in version control, so this line is commented out by default


# ----------------------------- FLUTTER/DART/PUB/RELATED -----------------------------
**/doc/api/
# Automatically generated documentation files
# They can be regenerated, so they are NOT necessary to track in version control

**/ios/Flutter/.last_build_id
# Internal Flutter build identifier used by iOS builds
# Automatically generated and NOT needed in version control

.dart_tool/
# Internal Flutter/Dart tool configuration files
# Includes package configs and build-related metadata
# Automatically generated and SHOULD be ignored

.flutter-plugins
# Records a list of plugins used in the Flutter project
# Generated automatically by Flutter when packages are added
# DO NOT EDIT OR TRACK MANUALLY!!!!!

.flutter-plugins-dependencies
# Tracks plugin dependencies and their relations
# Generated by Flutter and can be ignored

.pub-cache/
# This folder stores downloaded libraries (packages) your project depends on
# It acts as a local storage for download dependencies so you don't have to download them again for each project
# It is created automatically, and including it in version control would add a large number of unnecessary files

.pub/
# Stores intermediate pub (Dart package manager) files
# Automatically created when running flutter pub get
# No need to track these files in Git

/build/
# Compiled output of the app
# Includes platform specific binaries and intermediate files
# Recreated every time you build the project


# ----------------------------- SYMBOLICATION RELATED -----------------------------
app.*.symbols
# Generated when building a Flutter app with symbol support (for example, for crash reports)
# Used to decode stack traces from release builds (especially useful with tools like Firebase Crashlytics)
# These files are large, platform-specific, and sensitive so they should NOT be tracked in version control


# ----------------------------- OBFUSCATION RELATED -----------------------------
app.*.map.json
# Mapping files
# Used to reverse obfuscated names (like class or method names) in stack traces for debugging
# They are useful for crash analysis but should NOT be shared or committed to version control
# These files can contain sensitive information and are often large and environment specific


# ----------------------------- Android Studio will place build artifacts here -----------------------------
# These are output directories created when building the Flutter app for Android
# These folders are automatically generated and can be safely ignored in version control

/android/app/debug
# Contains the debug version of the app
# Used for development and testing

/android/app/profile
# Used for performance profiling builds

/android/app/release
# Contains the final production-ready version of the app
# Used for publishing


# ----------------------------- ENVIRONMENT VARIABLES -----------------------------
.env
# This file typically stores environment variables
# For example API keys, database URLs or other sensitive config data
# It is used to keep secrets out of your source code
# You should ALWAYS! ignore this file in version control to avoid accidentally exposing sensitive information



# ----------------------------------- CAN ALSO BE IGNORED -----------------------------------
# The files listed here are NOT ignored in this project but is useful to know you can ignore them and how

# ----------------------------- STANDARD FLUTTER -----------------------------

#/coverage/                                 
# This folder is created when you run tests to see how much of your code is tested
# It contains a report showing what parts of the code were tested
# You can safely ignore this folder, as its just for your own information and will be recreated automatically if needed

#/ios/Flutter/ephemeral/                    
# This folder is created automatically when building for iOS (Apple devices)
# It is temporary and not needed in your project files, as it can be rebuilt as is not meant to be edited

#/android/Flutter/ephemeral/                
# This folder is created automatically when building for Android devices
# It is also temporary and can be easily rebuilt

# /android/GeneratedPluginRegistrant.java    
# This file is generated by Flutter when you add plugins to your project
# When you update your dependencies (listed in pubspec.yaml) the file will also be updated or regenerated
# It will be created again automatically, even if it is missing

#/ios/GeneratedPluginRegistrant.*
# These files are also generated by Flutter for iOS plugins
# Since this file is automatically generated and can be different for every developer, saving it can lead to conflicts
# It will be recreated automatically if needed


# -----------------------------------IDE (CODE EDITOR) SETTINGS-----------------------------------        
#*.swo         
# More temporary files from Vim, not part of the project or app
# They also work as backup files while editing


# -----------------------------------OS FILES-----------------------------------   
#Thumbs.db     
# Hidden file created by Windows computers to remember folder thumbnails
# It is personal and can cause problems if shared and not part of your project
# If you delete a Thumbs.db file, Windows will create a new one next time you view the folder in thumbnail mode


# -----------------------------------DEPENDENCIES (DOWNLOADED LIBRARIES)-----------------------------------
#.packages        
# This file lists all the code libraries and packages your project uses
# It is automatically generated by Flutter and not needed in your project files
# The real list of dependencies is un pubspec.yaml, which you DO need to keep and share 

#pubspec.lock     
# CAREFUL! You cannot always ignore this file
# This file is automatically created by Flutter when you get or update the project's dependencies
# It records the exact versions of every package your project uses, including all indirect dependencies (packages used by the packages)
# YOU CAN IGNORE IT IF you are building a package meant to be used by other projects (a library)
# YOU CAN IGNORE IT IF you are the only person working on the app, since you control your own environment
# YOU SHOULD NOT IGNORE IT IF you are working with multiple developers on an app
# Still, even if you are working alone, not ignoring it will give you a safer and more stable development environment 
# This is because including it ensures that everyone working on the app uses the exact same versions of dependencies 
# Deleting it is not usually harmful, but it can affect the app's stability
