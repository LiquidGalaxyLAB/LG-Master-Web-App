// Example of integration with Google Gemini or ChatGPT
// This code requires API configuration
// This means that the API requires the set up of some settings or credentials for access and communication
import 'package:http/http.dart' as http;    // Imports the http package for making HTTP requests (GET, POST, PUT, DELETE)
import 'ai/api_config.dart';                // Imports the API configuration
import 'dart:convert';                      // Imports for jsonEncode and jsonDecode

// Define a class for AI service integration
class LGAIService {
  // Asynchronous method to get a response from the AI API given a prompt
  Future<String> getAIResponse(String prompt) async {
    // Here would go the logic to call Google Gemini, ChatGPT, or other APIs
    // These are just examples, you should change the values depending on the AI you are using
    
    //-------------------------------EXAMPLES-------------------------------
    // This are just samples of the structures of some AIs, don't use them both at the same time!!!
    // ---------GOOGLE GEMINI EXAMPLE---------
    final response = await http.post(
      // Gemini endpoint with API key
      Uri.parse('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$apiKey'),
           // https://generativelanguage.googleapis.com/ is the base URL
           // v1beta/models/gemini-pro:generateContent specifies the gemini-pro model and call its generateContent method
           // ?key=$apiKey appends the API key as a query parameter for authentication and authorization
      
      // Sets content type header
      // This is because of the JSON format
      headers: {'Content-Type': 'application/json'},
      // Encodes the request body as JSON
      body: jsonEncode({
        "contents": [
          {
            "parts": [
              {"text": prompt}
            ]
          }
        ]
      }),
    );
    // Check if the response is 'OK' (200 is code for 'OK')
    if (response.statusCode == 200) {
      // Decodes the JSON response
      final data = jsonDecode(response.body);
      // Extracts the generated text
      final text = data['candidates'][0]['content']['parts'][0]['text'];
          // The API returns a JSON object with a candidates array
          // Each candidate is a possible generated response
          // Each candidate contains a content object, which itself contains a parts array
          // Each part represents a segment of the response
          // For text generation, the text field from the first part is extracted
      // Returns the AI's response
      return text;
    } else {
      // Throws an error if the response is not 'OK'
      throw Exception('Gemini API error');
    }

    // ---------CHATGPT EXAMPLE---------
    final response = await http.post(
    //ChatGPT endpoint
      Uri.parse('https://api.openai.com/v1/chat/completions'),
           // https://api.openai.com is the base URL
           // /v1/chat/completions means we are using the 'chat' interface
      headers: {
        'Content-Type': 'application/json',  // Sets content type header so the body is formatted as JSON
        'Authorization': 'Bearer $apiKey',   // Sets authorization header to provide your secret API key as a token
      },
      // Encodes the request body as JSON
      body: jsonEncode({
        "model": "gpt-3.5-turbo",  // Specifies the ChatGPT model you are using, in this example is 3.5 turbo
        "messages": [
          {"role": "user", "content": prompt}  // This structure enables multi-turn conversations
        ]
      }),
    );

    // Check if the response is 'OK' (200 is code for 'OK')
    if (response.statusCode == 200) {
      // Decodes the JSON response
      final data = jsonDecode(response.body);
      // Extracts the generated text
      final text = data['choices'][0]['message']['content'];
            // choices is an array of possible completions (usually one for chat)
            // message is the text generated by the AI in response to the user's prompt
            // content is the actual text of the AI's reply
      // Returns the AI's response
      return text;
    } else {
      // Throws an error if the response is not 'OK'
      throw Exception('OpenAI API error');
    }

      //-----If you want to use other models that are not GEMINI or CHATGPT, please check their documentation-----
      // This is important to use the correct URL in Uri.parse, the correct type of headers, the correct way to decode, etc.
  }
}
